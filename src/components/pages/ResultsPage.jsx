// src/pages/Results.jsx
import React, { useState, useRef, useEffect, useMemo, useCallback, memo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Download, BookOpen, MessageCircle, Search, Wind, Star, Award } from 'lucide-react';
import PropTypes from 'prop-types';
import { debounce } from 'lodash';
import jsPDF from 'jspdf';
import 'jspdf-autotable'; // A powerful plugin for creating tables in jsPDF
import AIAdvisor from './AIAdvisor'; // Assuming this component exists

// --- PDF GENERATION UTILITY ---
// This function creates a professional, multi-page PDF document from the course data.
const generateCoursePDF = async (courses) => {
  const doc = new jsPDF();
  const pageHeight = doc.internal.pageSize.height;
  let yPos = 20; // Initial vertical position

  // --- PDF Header ---
  const addHeader = () => {
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(20);
    doc.setTextColor('#8A2BE2'); // Brand purple
    doc.text('Your Matched Course Results', 14, yPos);
    yPos += 8;
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(10);
    doc.setTextColor('#333333');
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, yPos);
    yPos += 4;
    doc.setDrawColor('#8A2BE2');
    doc.line(14, yPos, 196, yPos); // Header line
    yPos += 12;
  };

  // --- PDF Footer with Page Numbers ---
  const addFooter = () => {
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFont('helvetica', 'italic');
      doc.setFontSize(8);
      doc.setTextColor('#888888');
      doc.text(
        `Page ${i} of ${pageCount} - Generated by CourseFinder`,
        doc.internal.pageSize.width / 2,
        pageHeight - 10,
        { align: 'center' }
      );
    }
  };
  
  addHeader();

  // --- Course Content ---
  courses.forEach(course => {
    // Check if there is enough space for the next course block, otherwise add a new page
    // Estimate block height: 10 for title + (number of unis * 10) for table + 10 for padding
    const blockHeight = 20 + course.universities.length * 10;
    if (yPos + blockHeight > pageHeight - 20) { // -20 for footer margin
      doc.addPage();
      yPos = 20;
      addHeader();
    }

    // Course Title
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(16);
    doc.setTextColor('#333333');
    doc.text(course.course, 14, yPos);
    yPos += 8;

    // University Table for the course
    doc.autoTable({
      startY: yPos,
      head: [['Institution', 'Code', 'Cutoff Points']],
      body: course.universities.map(uni => [uni.name, uni.code, uni.cutoff]),
      theme: 'grid',
      headStyles: {
        fillColor: '#1A1A24', // Dark header for contrast
        textColor: '#FFFFFF',
        fontStyle: 'bold',
      },
      styles: {
        font: 'helvetica',
        fontSize: 10,
        cellPadding: 2,
      },
      columnStyles: {
        2: { halign: 'center' } // Center align cutoff points
      },
      didDrawPage: (data) => {
        // This ensures the yPos is correctly updated after the table is drawn
        yPos = data.cursor.y;
      }
    });
    
    yPos += 15; // Add padding after each course block
  });

  addFooter();
  doc.save(`Course_Results_${new Date().toISOString().split('T')[0]}.pdf`);
};


// --- DUMMY DATA ---
const dummyResultsData = [
    { course: "Medicine", emoji: "🩺", universities: [{ name: "University of Nairobi", code: "124513", cutoff: "42.7" }, { name: "Moi University", code: "125617", cutoff: "41.5" }, { name: "Aga Khan University", code: "125618", cutoff: "43.1" }] },
    { course: "Law", emoji: "⚖️", universities: [{ name: "Kenyatta University", code: "124789", cutoff: "39.2" }, { name: "Strathmore University", code: "126212", cutoff: "40.0" }] },
    { course: "Engineering", emoji: "🛠️", universities: [{ name: "JKUAT", code: "125934", cutoff: "43.0" }, { name: "Technical University of Kenya", code: "124999", cutoff: "41.8" }] },
    { course: "Computer Science", emoji: "💻", universities: [{ name: "Maseno University", code: "126001", cutoff: "39.6" }, { name: "Kabarak University", code: "125855", cutoff: "38.9" }, { name: "Strathmore University", code: "126212", cutoff: "41.2" }] },
    { course: "Architecture", emoji: "🏛️", universities: [{ name: "University of Nairobi", code: "124513", cutoff: "42.0" }, { name: "TUK", code: "124999", cutoff: "40.5" }] },
    { course: "Education", emoji: "📚", universities: [{ name: "Egerton University", code: "124320", cutoff: "37.2" }, { name: "Kenyatta University", code: "124789", cutoff: "36.5" }] },
];

const CourseCard = memo(({ result, index, setSelectedCourse }) => {
    // ... (CourseCard component remains the same as the previous impressive version) ...
    const cardRef = useRef(null);

    const handleMouseMove = (e) => {
        const { left, top } = cardRef.current.getBoundingClientRect();
        const x = e.clientX - left;
        const y = e.clientY - top;
        cardRef.current.style.setProperty('--mouse-x', `${x}px`);
        cardRef.current.style.setProperty('--mouse-y', `${y}px`);
    };

    return (
        <motion.div
        ref={cardRef}
        onMouseMove={handleMouseMove}
        initial={{ opacity: 0, scale: 0.95, y: 30 }}
        animate={{ opacity: 1, scale: 1, y: 0, transition: { duration: 0.5, delay: index * 0.07, ease: [0.22, 1, 0.36, 1] } }}
        whileHover={{ scale: 1.03, transition: { duration: 0.2 } }}
        className="group course-card relative bg-black/30 backdrop-blur-md p-6 rounded-2xl border border-white/10 overflow-hidden"
        role="article"
        >
        <div className="relative z-10 flex flex-col h-full">
            <div className="flex-grow">
            <div className="flex items-center gap-4 mb-4">
                <div className="text-4xl">{result.emoji}</div>
                <h3 className="text-xl font-bold text-white tracking-tight">{result.course}</h3>
            </div>
            <p className="text-sm text-purple-300 mb-6">Top Institutions</p>
            <ul className="space-y-3 text-gray-300">
                {result.universities.slice(0, 2).map((uni) => (
                <li key={uni.code} className="flex justify-between items-center text-sm">
                    <span className="truncate pr-4 flex items-center gap-2">
                    <Star size={16} className="text-amber-400 flex-shrink-0" />
                    {uni.name}
                    </span>
                    <span className="font-mono bg-purple-500/20 text-purple-300 px-2 py-1 rounded-md">{uni.cutoff}</span>
                </li>
                ))}
            </ul>
            </div>
            <motion.button
            onClick={() => setSelectedCourse(result)}
            className="w-full mt-8 flex items-center justify-center gap-2 rounded-lg bg-white/10 px-4 py-2.5 text-sm font-semibold text-white shadow-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 focus:ring-offset-gray-900 transition-colors group-hover:bg-white/20"
            aria-label={`Explore details for ${result.course}`}
            whileTap={{ scale: 0.98, transition: { duration: 0.1 } }}
            >
            <MessageCircle className="w-4 h-4" />
            Explore Details
            </motion.button>
        </div>
        </motion.div>
    );
});
CourseCard.propTypes = { result: PropTypes.object.isRequired, index: PropTypes.number.isRequired, setSelectedCourse: PropTypes.func.isRequired };
CourseCard.displayName = "CourseCard";

const SkeletonCard = () => (
    // ... (SkeletonCard remains the same) ...
    <div className="bg-black/30 backdrop-blur-md p-6 rounded-2xl border border-white/10 relative overflow-hidden">
        <div className="shimmer absolute inset-0"></div>
        <div className="flex items-center gap-4 mb-4">
            <div className="w-10 h-10 bg-white/10 rounded-md"></div>
            <div className="w-3/4 h-6 bg-white/10 rounded-md"></div>
        </div>
        <div className="w-1/3 h-4 bg-white/10 rounded-md mb-6"></div>
        <div className="space-y-3">
            <div className="flex justify-between items-center"><div className="w-2/3 h-5 bg-white/10 rounded-md"></div><div className="w-1/5 h-7 bg-white/10 rounded-md"></div></div>
            <div className="flex justify-between items-center"><div className="w-1/2 h-5 bg-white/10 rounded-md"></div><div className="w-1/5 h-7 bg-white/10 rounded-md"></div></div>
        </div>
        <div className="w-full h-10 mt-8 bg-white/10 rounded-lg"></div>
    </div>
);


// --- MAIN RESULTS PAGE COMPONENT ---
const Results = () => {
  const [courses, setCourses] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [showApplyPopup, setShowApplyPopup] = useState(false);
  const [messages, setMessages] = useState([]);
  const [currentInput, setCurrentInput] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [isDownloading, setIsDownloading] = useState(false);
  const [sortBy, setSortBy] = useState('cutoff');
  const [currentPage, setCurrentPage] = useState(1);
  const coursesPerPage = 8;
  
  // ... (useEffect, handleSearch, and memoized calculations remain the same) ...
  useEffect(() => {
    setIsLoading(true);
    setTimeout(() => {
      setCourses(dummyResultsData);
      setIsLoading(false);
    }, 1500);
  }, []);

  const handleSearch = useCallback(debounce((value) => { setSearchQuery(value); setCurrentPage(1); }, 300), []);

  const filteredAndSortedCourses = useMemo(() => {
    let filtered = courses.filter(
      (result) =>
        result.course.toLowerCase().includes(searchQuery.toLowerCase()) ||
        result.universities.some(u => u.name.toLowerCase().includes(searchQuery.toLowerCase()))
    );

    filtered.sort((a, b) => {
      if (sortBy === 'name') return a.course.localeCompare(b.course);
      const aCutoff = Math.max(...a.universities.map(u => parseFloat(u.cutoff) || 0));
      const bCutoff = Math.max(...b.universities.map(u => parseFloat(u.cutoff) || 0));
      return bCutoff - aCutoff;
    });
    return filtered;
  }, [courses, searchQuery, sortBy]);

  const paginatedCourses = useMemo(() => {
    const startIndex = (currentPage - 1) * coursesPerPage;
    return filteredAndSortedCourses.slice(startIndex, startIndex + coursesPerPage);
  }, [filteredAndSortedCourses, currentPage]);
  const totalPages = Math.ceil(filteredAndSortedCourses.length / coursesPerPage);


  // --- IMPROVED PDF DOWNLOAD HANDLER ---
  const handleDownloadPDF = async () => {
    if (filteredAndSortedCourses.length === 0) {
      alert("No courses to download.");
      return;
    }
    setIsDownloading(true);
    try {
      // Pass all filtered courses, not just the paginated ones
      await generateCoursePDF(filteredAndSortedCourses);
    } catch (error) {
      console.error("Failed to generate PDF:", error);
      alert("An error occurred while generating the PDF. Please try again.");
    } finally {
      setIsDownloading(false);
    }
  };

  const renderContent = () => {
    // ... (renderContent logic remains the same) ...
    if (isLoading) {
      return Array.from({ length: coursesPerPage }).map((_, i) => <SkeletonCard key={i} />);
    }
    if (error) {
      return <p className="col-span-full text-center text-red-400">{error}</p>;
    }
    if (paginatedCourses.length === 0) {
      return (
        <motion.div layout initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="col-span-full text-center py-20 bg-black/20 rounded-lg">
          <Wind size={48} className="mx-auto text-purple-400 mb-4" />
          <h3 className="text-xl font-semibold text-white">No Matching Courses</h3>
          <p className="text-gray-400 mt-2">Widen your search to discover more opportunities.</p>
        </motion.div>
      );
    }
    return paginatedCourses.map((result, index) => (
      <CourseCard key={result.course} result={result} index={index} setSelectedCourse={setSelectedCourse} />
    ));
  };

  return (
    <div className="min-h-screen bg-[#0D0C22] text-gray-200 font-sans p-4 sm:p-6 lg:p-8 relative overflow-hidden">
        <div className="star-field">
            <div className="layer"></div><div className="layer"></div><div className="layer"></div>
        </div>

      <div className="max-w-screen-xl mx-auto z-10 relative">
        {/* ... (Header and search/filter sections remain the same) ... */}
        <header className="text-center my-12">
            <motion.h1 
                initial={{ opacity: 0, y: -30 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.7, ease: "easeOut" }}
                className="text-4xl md:text-6xl font-bold text-white tracking-tighter"
            >
                Your University Pathway
            </motion.h1>
            <motion.p 
                initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.7, delay: 0.2, ease: "easeOut" }}
                className="mt-4 text-lg text-gray-400 max-w-2xl mx-auto"
            >
                Based on your results, here are the courses and universities within your reach. Explore your future.
            </motion.p>
        </header>

        <motion.div 
            initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5, delay: 0.4 }}
            className="mb-8 p-2 flex flex-col md:flex-row gap-4 bg-black/30 backdrop-blur-sm rounded-xl border border-white/10 sticky top-4 z-50"
        >
            <div className="relative flex-grow">
                <Search className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none" size={20} />
                <input
                    type="text"
                    onChange={(e) => handleSearch(e.target.value)}
                    placeholder="Search by course or university..."
                    className="w-full pl-12 pr-4 py-3 bg-transparent rounded-lg focus:ring-2 focus:ring-purple-500 focus:outline-none"
                />
            </div>
            <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="w-full md:w-auto appearance-none pl-4 pr-10 py-3 bg-transparent border border-transparent rounded-lg focus:ring-2 focus:ring-purple-500 focus:outline-none hover:bg-white/5 transition-colors"
            >
                <option value="cutoff">Sort by Cutoff</option>
                <option value="name">Sort by Name</option>
            </select>
        </motion.div>

        <main>
          <motion.div layout className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {renderContent()}
          </motion.div>
        </main>
        
        {/* ... (Pagination remains the same) ... */}
        {totalPages > 1 && !isLoading && (
            <div className="flex justify-center items-center mt-12 gap-4 text-sm">
                <motion.button whileTap={{ scale: 0.9 }} onClick={() => setCurrentPage(p => Math.max(1, p - 1))} disabled={currentPage === 1} className="px-4 py-2 rounded-lg bg-white/10 disabled:opacity-50 hover:bg-white/20 transition-colors">Prev</motion.button>
                <span className="font-mono">Page {currentPage} of {totalPages}</span>
                <motion.button whileTap={{ scale: 0.9 }} onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))} disabled={currentPage === totalPages} className="px-4 py-2 rounded-lg bg-white/10 disabled:opacity-50 hover:bg-white/20 transition-colors">Next</motion.button>
            </div>
        )}

        <footer className="text-center mt-20 py-10 border-t border-white/10">
            <p className="text-gray-400 mb-4">Ready to take the next step?</p>
            <div className="flex justify-center gap-4">
                <motion.button 
                    onClick={handleDownloadPDF} 
                    disabled={isDownloading || (!isLoading && filteredAndSortedCourses.length === 0)} 
                    whileHover={{ y: -2, scale: 1.05 }} 
                    className="flex items-center gap-2 px-6 py-3 bg-purple-600 text-white font-semibold rounded-lg shadow-lg shadow-purple-500/20 disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none disabled:bg-gray-500"
                >
                    <Download size={18} /> {isDownloading ? "Generating..." : "Download Report"}
                </motion.button>
                <motion.button onClick={() => setShowApplyPopup(true)} whileHover={{ y: -2, scale: 1.05 }} className="flex items-center gap-2 px-6 py-3 bg-white/10 text-white font-semibold rounded-lg">
                    <BookOpen size={18} /> How to Apply
                </motion.button>
            </div>
        </footer>
      </div>

      {/* ... (Modals and global styles remain the same) ... */}
      <AnimatePresence>
        {selectedCourse && (
          <AIAdvisor selectedCourse={selectedCourse} closeModal={() => setSelectedCourse(null)} messages={messages} setMessages={setMessages} currentInput={currentInput} setCurrentInput={setCurrentInput} />
        )}
        
        {showApplyPopup && (
          <motion.div
            initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}
            className="fixed inset-0 z-[100] flex items-center justify-center bg-black/80 backdrop-blur-sm p-4"
            onClick={() => setShowApplyPopup(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} exit={{ scale: 0.9, opacity: 0 }}
              onClick={(e) => e.stopPropagation()}
              className="w-full max-w-lg bg-gradient-to-br from-[#1D1C3D] to-[#121127] p-8 rounded-2xl shadow-2xl border border-white/10"
            >
              <h2 className="text-2xl font-bold text-white mb-4 flex items-center gap-3"><BookOpen /> Applying via KUCCPS</h2>
              <div className="prose prose-invert prose-p:text-gray-300 prose-li:text-gray-300 prose-a:text-purple-400 hover:prose-a:text-purple-300">
                <p>Follow these steps to apply for courses through the Kenya Universities and Colleges Central Placement Service (KUCCPS):</p>
                <ol>
                    <li>Visit the official KUCCPS portal.</li>
                    <li>Log in using your KCSE index number and password.</li>
                    <li>Select preferred courses and universities based on your qualifications.</li>
                    <li>Submit your application and pay the required fee before the deadline.</li>
                    <li>Regularly check the portal for placement updates.</li>
                </ol>
              </div>
              <button onClick={() => setShowApplyPopup(false)} className="w-full mt-6 py-2 bg-purple-600 rounded-lg font-semibold hover:bg-purple-700 transition">Close</button>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      <style jsx global>{`
        .course-card::before {
            content: ''; position: absolute; left: 0; top: 0; width: 100%; height: 100%;
            background: radial-gradient(350px circle at var(--mouse-x) var(--mouse-y), rgba(168, 85, 247, 0.25), transparent 100%);
            border-radius: inherit; opacity: 0; transition: opacity 0.4s;
        }
        .course-card:hover::before { opacity: 1; }
        .shimmer {
            background-image: linear-gradient(110deg, transparent 25%, rgba(255,255,255,0.1) 50%, transparent 75%);
            background-size: 200% 100%; animation: shimmer-animation 1.5s infinite linear;
        }
        @keyframes shimmer-animation { from { background-position: 200% 0; } to { background-position: -200% 0; } }
        .star-field { position: fixed; top: 0; left: 0; width: 100%; height: 100vh; z-index: 0; }
        .star-field .layer { position: absolute; inset: 0; background-repeat: repeat; }
        .star-field .layer:nth-child(1) { background-image: url('https://www.toptal.com/designers/subtlepatterns/uploads/background-pattern.png'); background-size: 100px; animation: move-stars 200s linear infinite; }
        .star-field .layer:nth-child(2) { background-image: url('https://www.toptal.com/designers/subtlepatterns/uploads/background-pattern.png'); background-size: 250px; animation: move-stars 150s linear infinite; }
        .star-field .layer:nth-child(3) { background-image: url('https://www.toptal.com/designers/subtlepatterns/uploads/background-pattern.png'); background-size: 400px; animation: move-stars 100s linear infinite; }
        @keyframes move-stars { from { transform: translateY(0); } to { transform: translateY(-1000px); } }
      `}</style>
    </div>
  );
};

export default Results;